1.Why immutability is important ?
-->
2.Props vs State ?
-->
props:
    i.   props is a way to pass data from parent to child components.
   ii.  A parent component can pass data to it's child components.
   iii. A child component is a reusable piece of UI  that can access data(props) from it's parent component.
   iv.  Props are readOnly. they are used to pass data from parent to child in a unidirectional way.
state:
   i.  state refers to the data that is managed within a component and can change over time.
   ii. state is used to managed the internal data  and dynamic behaviour of a component.

3.Default vs named exports
--> A file can have no more than one default export, but it can have as many named exports as you like.When you write a default import, you can put any name you want after import. For example, you could write [import Banana from './Button.js'] instead and it would still provide you with the same default export. In contrast, with named imports, the name has to match on both sides. That’s why they are called named imports!

4.what is JSX?
--> JSX is a syntax extension for javascript. JSX allows you to write html code into your js file.This allows you to insert dynamic content into your UI:
5.what is pure function?
--> pure function is a function with the following characteristics:

i. It minds its own business. It does not change any objects or variables that existed before it was called.
ii. Same inputs, same output. Given the same inputs, a pure function should always return the same result.



6. what is mutation?
7.what is event handler?
8.what is Event propagation

9. what is event bubble?
10.what is context api.

11. e.stopPropagation() stops the event handlers attached to the tags above from firing.
12. e.preventDefault() prevents the default browser behavior for the few events that have it.

13.Can event handlers have side effects?
-->Absolutely! Event handlers are the best place for side effects.
Unlike rendering functions, event handlers don’t need to be pure, so it’s a great place to change something—for example, change an input’s value in response to typing, or change a list in response to a button press. However, in order to change some information, you first need some way to store it. In React, this is done by using state, a component’s memory. You will learn all about it on the next page.

14.RECAP
   1.You can handle events by passing a function as a prop to an element like <button>.
   Event handlers must be passed, not called! onClick={handleClick}, not onClick={handleClick()}.
   2.You can define an event handler function separately or inline.
   3.Event handlers are defined inside a component, so they can access props.
   4. You can declare an event handler in a parent and pass it as a prop to a child.
   5. You can define your own event handler props with application-specific names.
   6.Events propagate upwards. Call e.stopPropagation() on the first argument to prevent that.
   7. Events may have unwanted default browser behavior. Call e.preventDefault() to prevent that.
   8. Explicitly calling an event handler prop from a child handler is a good alternative to propagation.

15. hooks in react...
https://medium.com/@ryardley/react-hooks-not-magic-just-arrays-cd4f1857236e
16. useState-->When you call useState, you are telling React that you want this component to remember something:
Recap...........
    -->Use a state variable when a component needs to “remember” some information between renders.
    -->State variables are declared by calling the useState Hook.
    -->Hooks are special functions that start with use. They let you “hook into” React features like state.
    -->Hooks might remind you of imports: they need to be called unconditionally.    Calling Hooks, including useState, is only valid at the top level of a component or another Hook.
    -->The useState Hook returns a pair of values: the current state and the function to update it.
    -->You can have more than one state variable. Internally, React matches them up by their order.
    -->State is private to the component. If you render it in two places, each copy gets its own state.


16. conditional rendering.module-56
--> conditional rendering
/**
 * CONDITIONAL RENDERING
 * 1. use if or if else to set a variable that will contain an element, components
 * 2. ternary operator: condition ? 'for true' : 'false'
 * 3. Logical &&: (if the condition is true then the next thing will be displayed)
 * 4. Logical ||: (if the condition is false then the next thing will be displayed)
 *
 * */

/**
 * CONDITIONAL CSS Class
 * 1. use ternary
 * 2. ternary inside template string
 * */

17. prop drilling--solution............> context api
